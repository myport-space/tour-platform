// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  OPERATOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum TourStatus {
  DRAFT
  ACTIVE
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH
}

enum SpotStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  FULL
}

enum AccommodationType {
  HOTEL
  RESORT
  HOSTEL
  GUESTHOUSE
  APARTMENT
  VILLA
  CAMPING
  CRUISE
}

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  TRIPLE
  QUAD
  SUITE
  FAMILY
  DORMITORY
}

enum TransportationType {
  BUS
  CAR
  VAN
  TRAIN
  PLANE
  BOAT
  WALKING
  BICYCLE
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  ALL_INCLUSIVE
}

// User Models
model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  phone     String?
  avatar    String?
  role      UserRole   @default(CUSTOMER)
  status    UserStatus @default(PENDING_VERIFICATION)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  operator TourOperator?
  bookings Booking[]
  reviews  Review[]
  payments Payment[]

  @@map("users")
}

model TourOperator {
  id                String   @id @default(cuid())
  userId            String   @unique
  companyName       String
  companyDescription String  @db.Text
  companyAddress    String
  companyCity       String
  companyCountry    String
  companyWebsite    String?
  businessLicense   String?
  taxId             String?
  experience        String?
  specializations   String[]
  languages         String[]
  rating            Float?   @default(0)
  totalReviews      Int      @default(0)
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tours Tour[]

  @@map("tour_operators")
}

// Tour Models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#3B82F6")
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tours Tour[]

  @@map("categories")
}

model Tour {
  id                String     @id @default(cuid())
  title             String
  description       String     @db.Text
  shortDescription  String?
  location          String
  duration          String
  price             Float
  originalPrice     Float?
  currency          String     @default("USD")
  maxGroupSize      Int        @default(20)
  minAge            Int?
  maxAge            Int?
  difficulty        String?
  highlights        String[]
  inclusions        String[]
  exclusions        String[]
  requirements      String[]
  restrictions      String[]
  images            String[]
  videoUrl          String?
  status            TourStatus @default(DRAFT)
  isPublished       Boolean    @default(false)
  isFeatured        Boolean    @default(false)
  rating            Float?     @default(0)
  totalReviews      Int        @default(0)
  totalBookings     Int        @default(0)
  categoryId        String
  operatorId        String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  category       Category        @relation(fields: [categoryId], references: [id])
  operator       TourOperator    @relation(fields: [operatorId], references: [id])
  spots          Spot[]
  itinerary      Itinerary[]
  accommodations Accommodation[]
  transportation Transportation[]
  bookings       Booking[]
  reviews        Review[]

  @@map("tours")
}

model Spot {
  id            String     @id @default(cuid())
  name          String
  description   String?
  departureDate DateTime
  returnDate    DateTime
  maxSeats      Int
  bookedSeats   Int        @default(0)
  price         Float?
  status        SpotStatus @default(ACTIVE)
  tourId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  tour     Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("spots")
}

model Itinerary {
  id          String   @id @default(cuid())
  day         Int
  title       String
  description String   @db.Text
  activities  String[]
  meals       MealType[]
  tourId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("itinerary")
}

model Accommodation {
  id          String            @id @default(cuid())
  name        String
  type        AccommodationType
  roomType    RoomType
  description String?
  address     String?
  checkIn     DateTime?
  checkOut    DateTime?
  nights      Int?
  amenities   String[]
  images      String[]
  tourId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("accommodations")
}

model Transportation {
  id          String            @id @default(cuid())
  type        TransportationType
  description String?
  departure   String?
  arrival     String?
  duration    String?
  details     String?
  tourId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@map("transportation")
}

// Booking Models
model Booking {
  id             String        @id @default(cuid())
  bookingNumber  String        @unique
  totalAmount    Float
  paidAmount     Float         @default(0)
  currency       String        @default("USD")
  status         BookingStatus @default(PENDING)
  specialRequests String?      @db.Text
  notes          String?       @db.Text
  customerId     String
  tourId         String
  spotId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  customer  User       @relation(fields: [customerId], references: [id])
  tour      Tour       @relation(fields: [tourId], references: [id])
  spot      Spot?      @relation(fields: [spotId], references: [id])
  travelers Traveler[]
  payments  Payment[]

  @@map("bookings")
}

model Traveler {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  dateOfBirth DateTime?
  nationality String?
  passportNumber String?
  dietaryRequirements String?
  medicalConditions String?
  emergencyContact String?
  bookingId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("travelers")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("USD")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  paymentIntentId String?
  description     String?
  metadata        Json?
  bookingId       String
  customerId      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id])
  customer User    @relation(fields: [customerId], references: [id])

  @@map("payments")
}

// Review Models
model Review {
  id               String   @id @default(cuid())
  rating           Int     
  title            String?
  comment          String   @db.Text
  isVerified       Boolean  @default(false)
  isRecommended    Boolean  @default(true)
  helpfulVotes     Int      @default(0)
  operatorResponse String?  @db.Text
  customerId       String
  tourId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  customer User @relation(fields: [customerId], references: [id])
  tour     Tour @relation(fields: [tourId], references: [id])

  @@map("reviews")
}

// Indexes for better performance
